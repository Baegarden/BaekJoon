import java.io.*;

// Baekjoon 14889 : 스타트와 링크
public class Main {
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static int N;
    static int[][] num;
    static int[]arr1;
    static int[]arr2;
    static int min = 1000;

    public static void BT(int num, int[] start, int[] link, int index1, int index2) {
        if(num == N + 1) {
            int val = Math.abs(calc(start) - calc(link));
            min = min > val ? val : min;
            return;
        }

        if(index1 < N / 2) {
            start[index1]=num;
            BT(num + 1, start, link, index1 + 1, index2);
            start[index1] = 0;
        }
        if(index2 < N / 2) {
            link[index2] = num;
            BT(num + 1, start, link, index1, index2 + 1);
        }
    }

    public static int calc(int[] start) {
        int sum = 0;
        int row, col;
        for(int i = 0; i < N / 2; i++) {
            for(int j = i + 1; j < N / 2; j++) {
                row = start[i] - 1;
                col = start[j] - 1;
                sum += num[row][col];
                sum += num[col][row];
            }
        }
        return sum;
    }

    public static void main(String [] args) throws IOException{
        // 입력
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        num = new int[N][N];
        arr1 = new int[N / 2]; // 스타트
        arr2 = new int[N / 2]; // 링크
        for(int i = 0; i < N; i++) {
            String[] tmp1 = br.readLine().split(" ");
            for (int j = 0; j < N; j++) {
                num[i][j] = Integer.parseInt(tmp1[j]);
            }
        }
        BT(1, arr1, arr2, 0, 0);
        System.out.print(min);
    }
}


# Baekjoon 14889(py) : 연산자 끼워넣기
N = int(input())
array = []
for i in range(N):
    array.append(list(map(int, input().split())))
start = [0 for i in range(N//2)]
link = [0 for i in range(N//2)]
min = 1000

def calc(arr):
    sum = 0
    row = 0
    col = 0
    for i in range(N//2):
        for j in range(i+1, N//2):
            row = arr[i]
            col = arr[j]
            sum += array[row][col]
            sum += array[col][row]
    return sum

def startNlink(num, idx1, idx2):
    global min
    if num == N:
        result = abs(calc(start) - calc(link))
        if min > result:
            min = result
        return

    if idx1 < N // 2:
        start[idx1] = num
        startNlink(num+1, idx1+1, idx2)

    if idx2 < N // 2:
        link[idx2] = num
        startNlink(num+1, idx1, idx2+1)

startNlink(0, 0, 0)
print(min)
