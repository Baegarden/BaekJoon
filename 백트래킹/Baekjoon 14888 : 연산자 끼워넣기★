import java.io.*;

// Baekjoon 14888 : 연산자 끼워넣기
public class Main {
    static int N;
    static int[] num;
    static int[] oper = new int[4];
    static int min = 1000000000;
    static int max = -1000000000;
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

    public static int operate(int a, int b, int op) {
        int result = 0;
        if(op == 0) result = a + b;
        else if(op == 1) result = a - b;
        else if(op == 2) result = a * b;
        else if(op == 3) result = a / b;

        return result;
    }

    public static void BT(int preResult, int opNum) throws Exception {
        if(opNum == N - 1) {
            if(preResult < min)
                min = preResult;
            if(preResult > max)
                max = preResult;
            return;
        }
        for(int i = 0; i < 4; i++) {
            int result;
            if(oper[i] != 0) {
                result = operate(preResult,num[opNum + 1], i);
                oper[i]--;
                BT(result,opNum + 1);
                oper[i]++;
            }
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());

        num = new int[N];
        String[] tmp1 = br.readLine().split(" ");
        for(int i = 0; i < N; i++) {
            num[i]=Integer.parseInt(tmp1[i]);
        }

        String[] tmp2 = br.readLine().split(" ");
        for(int i = 0; i < 4; i++) {
            oper[i]=Integer.parseInt(tmp2[i]);
        }

        BT(num[0],0);

        bw.write(max + "\n" + min);
        bw.flush();
        bw.close();
    }

}


# Baekjoon 14888(py) : 연산자 끼워넣기
N = int(input())
num = list(map(int, input().split()))
oper = list(map(int, input().split()))
operUsed = [0 for i in range(N - 1)]
min = 1000000000
max = -1000000000

def calc_2(x, y, z):
    if z == 1:
        return x + y
    elif z == 2:
        return x - y
    elif z == 3:
        return x * y
    else:
        if x < 0:
            x *= -1
            return -(x // y)
        elif y < 0:
            y *= -1
            return -(x // y)
        else:
            return x // y

def calc():
    result = 0
    for i in range(N):
        if i == 0:
            result = num[i]
        else:
            result = calc_2(result, num[i], operUsed[i - 1])
    return result

def func(depth):
    global min, max
    if depth == N - 1:
        result = calc()
        if min > result:
            min = result
        if max < result:
            max = result
        return

    for i in range(4):
        if oper[i] != 0:
            oper[i] -= 1
            operUsed[depth] = i + 1
            func(depth + 1)
            oper[i] += 1
            operUsed[depth] = 0

func(0)
print(max)
print(min)


# Baekjoon 14888(py) : 연산자 끼워넣기 (다른사람의 코드)
import sys

input = sys.stdin.readline
N = int(input())
num = list(map(int, input().split()))
op = list(map(int, input().split()))  # +, -, *, //

maximum = -1e9
minimum = 1e9


def dfs(depth, total, plus, minus, multiply, divide):
    global maximum, minimum
    if depth == N:
        maximum = max(total, maximum)
        minimum = min(total, minimum)
        return

    if plus:
        dfs(depth + 1, total + num[depth], plus - 1, minus, multiply, divide)
    if minus:
        dfs(depth + 1, total - num[depth], plus, minus - 1, multiply, divide)
    if multiply:
        dfs(depth + 1, total * num[depth], plus, minus, multiply - 1, divide)
    if divide:
        dfs(depth + 1, int(total / num[depth]), plus, minus, multiply, divide - 1)


dfs(1, num[0], op[0], op[1], op[2], op[3])
print(maximum)
print(minimum)
