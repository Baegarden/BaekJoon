# Baekjoon 1759 : 암호 만들기
from collections import deque

# 입력
N = int(input())
arrInput = []
maxNum = 0
for i in range(N):
    tmp = list(map(int, input().split()))
    arrInput.append(tmp)
    if maxNum < max(tmp):
        maxNum = max(tmp)

# 알고리즘
dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]


def bfs(arr, i, j):
    queue = deque()
    queue.append([i, j])
    arr[i][j] = 0

    while queue:
        x, y = queue.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if nx < 0 or nx >= N or ny < 0 or ny >= N:
                continue

            if arr[nx][ny] == 1:
                arr[nx][ny] = 0
                queue.append((nx, ny))


def func(arr):
    result = 0
    for i in range(N):
        for j in range(N):
            if arr[i][j] == 1:
                bfs(arr, i, j)  # 안전한 영역을 0으로 만들며 진행 (다시 방문하지 않도록)
                result += 1
    return result   # 안전한 영역의 개수 리턴


# 출력
answer = 0
for k in range(maxNum+1):
    arr = [[0 for i in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            if arrInput[i][j] > k:  # k = 모든 물의 높이(0 ~ 모두 잠길경우)
                arr[i][j] = 1
    count = func(arr)
    if answer < count:
        answer = count
print(answer)
